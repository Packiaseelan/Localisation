//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Test.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The greeting service definition.
///
/// Usage: instantiate `Trainer_GreeterClient`, then call methods of this protocol to make API calls.
internal protocol Trainer_GreeterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Trainer_GreeterClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: Trainer_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Trainer_HelloRequest, Trainer_HelloReply>
}

extension Trainer_GreeterClientProtocol {
  internal var serviceName: String {
    return "trainer.Greeter"
  }

  /// Sends a greeting
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: Trainer_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Trainer_HelloRequest, Trainer_HelloReply> {
    return self.makeUnaryCall(
      path: Trainer_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension Trainer_GreeterClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "Trainer_GreeterNIOClient")
internal final class Trainer_GreeterClient: Trainer_GreeterClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Trainer_GreeterClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Trainer_GreeterClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the trainer.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Trainer_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Trainer_GreeterNIOClient: Trainer_GreeterClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Trainer_GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the trainer.Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Trainer_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
/// The greeting service definition.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Trainer_GreeterAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Trainer_GreeterClientInterceptorFactoryProtocol? { get }

  func makeSayHelloCall(
    _ request: Trainer_HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Trainer_HelloRequest, Trainer_HelloReply>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Trainer_GreeterAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Trainer_GreeterClientMetadata.serviceDescriptor
  }

  internal var interceptors: Trainer_GreeterClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSayHelloCall(
    _ request: Trainer_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Trainer_HelloRequest, Trainer_HelloReply> {
    return self.makeAsyncUnaryCall(
      path: Trainer_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Trainer_GreeterAsyncClientProtocol {
  internal func sayHello(
    _ request: Trainer_HelloRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Trainer_HelloReply {
    return try await self.performAsyncUnaryCall(
      path: Trainer_GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Trainer_GreeterAsyncClient: Trainer_GreeterAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Trainer_GreeterClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Trainer_GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol Trainer_GreeterClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<Trainer_HelloRequest, Trainer_HelloReply>]
}

internal enum Trainer_GreeterClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "trainer.Greeter",
    methods: [
      Trainer_GreeterClientMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/trainer.Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}

/// The greeting service definition.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Trainer_GreeterProvider: CallHandlerProvider {
  var interceptors: Trainer_GreeterServerInterceptorFactoryProtocol? { get }

  /// Sends a greeting
  func sayHello(request: Trainer_HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Trainer_HelloReply>
}

extension Trainer_GreeterProvider {
  internal var serviceName: Substring {
    return Trainer_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trainer_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Trainer_HelloReply>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        userFunction: self.sayHello(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// The greeting service definition.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Trainer_GreeterAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Trainer_GreeterServerInterceptorFactoryProtocol? { get }

  /// Sends a greeting
  @Sendable func sayHello(
    request: Trainer_HelloRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Trainer_HelloReply
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Trainer_GreeterAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Trainer_GreeterServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Trainer_GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Trainer_GreeterServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Trainer_HelloRequest>(),
        responseSerializer: ProtobufSerializer<Trainer_HelloReply>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        wrapping: self.sayHello(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol Trainer_GreeterServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<Trainer_HelloRequest, Trainer_HelloReply>]
}

internal enum Trainer_GreeterServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "trainer.Greeter",
    methods: [
      Trainer_GreeterServerMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/trainer.Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}
